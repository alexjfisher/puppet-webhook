#!/usr/bin/env ruby
require 'openssl'
require 'optparse'
require 'webrick'
require 'webrick/https'
require 'puppet_webhook'

approot = File.expand_path(File.join(File.dirname(__FILE__), '..'))
options = {
  host: '0.0.0.0',
  port: '8088',
  logfile: $stderr,
  loglevel: 'WARN',
  server_type: WEBrick::SimpleServer
}

ssl_opts = { ssl_verify: false }

optparse = OptionParser.new do |opts| # rubocop:disable Metrics/BlockLength
  opts.banner = 'Usage: puppet_webhook [-p <port>] [-l <logfile>] [-d]
       -- Starts the Puppet Webhook API service.

'

  opts.on('-d', '--debug', 'Display or log messages.') do
    options[:loglevel] = 'DEBUG'
  end

  opts.on('-l [LOGFILE]', '--logfile [LOGFILE]',
          'Path to logfile. Defaults to no logging, or /var/log/puppet_webhook if no filename is passed.') do |arg|
    options[:logfile] = arg || '/var/log/puppet_webhook'
  end

  opts.on('-p PORT', '--port PORT', 'Port to listen on. Defaults to 8088.') do |arg|
    options[:port] = arg
  end

  opts.on('-D', '--daemon', 'Run the server in daemon mode. Defaults to simple if not passed') do
    options[:server_type] = WEBrick::Daemon
  end

  opts.on('--pidfile FILE', 'Specify the PID file to use.') do |arg|
    options[:pidfile] = arg || '/var/run/puppet_webhook/webhook.pid'
  end

  opts.on('--ssl', 'Enable SSL Support.') do
    ssl_opts[:enable_ssl] = true
  end

  opts.on('--ssl-cert FILE', 'Specify the SSL cert to use. Pair with --ssl-key.') do |arg|
    ssl_opts[:ssl_cert] = OpenSSL::X509::Certificate.new(File.open(arg).read)
  end

  opts.on('--ssl-key FILE', 'Specify the SSL key to use. Pair with --ssl-cert.') do |arg|
    ssl_opts[:ssl_key] = OpenSSL::PKey::RSA.new(File.open(arg))
  end

  opts.on('-c FILE', '--configfile FILE', 'Specifies a configuration file to use.') do |arg|
    @server_config = arg
  end

  opts.separator('')

  opts.on('-h', '--help') do
    puts
    puts opts
    puts
    exit
  end
end

optparse.parse!

if @server_config
  config_file(@server_config)
  if settings.respond_to? :server_type=
    options[:server_type] = WEBrick::Daemon if settings.server_type == 'daemon'
  end
  options[:host] = settings.host if settings.respond_to? :host=
  options[:port] = settings.port if settings.respond_to? :port=
  options[:pidfile] = settings.pidfile if settings.respond_to? :pidfile=
  options[:logfile] = settings.logfile if settings.respond_to? :logfile=
  options[:loglevel] = settings.loglevel if settings.respond_to? :loglevel=
  ssl_opts[:enable_ssl] = settings.enable_ssl if settings.respond_to? :enable_ssl=
  ssl_opts[:ssl_verify] = settings.ssl_verify if settings.respond_to? :ssl_verify=
  ssl_opts[:ssl_cert] = settings.ssl_cert if settings.respond_to? :ssl_cert=
  ssl_opts[:ssl_key] = settings.enable_ssl if settings.respond_to? :ssl_key=
end

LOGGER = WEBrick::Log.new(options[:logfile], Object.const_get("WEBrick::Log::#{options[:loglevel]}"))

webrick_opts = {
  Host: options[:host],
  Port: options[:port],
  DocumentRoot: approot,
  ServerType: options[:server_type],
  StartCallBack: proc { File.open(options[:pidfile], 'w') { |f| f.write Process.pid } }
}

if ssl_opts[:enable_ssl]
  webrick_opts[:SSLEnable] = ssl_opts[:enable_ssl]
  webrick_opts[:SSLVerifyClient] = ssl_opts[:ssl_verify]
  webrick_opts[:SSLCertificate] = ssl_opts[:ssl_cert]
  webrick_opts[:SSLPrivateKey] = ssl_opts[:ssl_key]
  webrick_opts[:SSLCertName] = [['CN', WEBrick::Utils.getservername]]
end

Rack::Handler::WEBrick.run(PuppetWebhook, webrick_opts) do |server|
  %i[INT TERM].each { |sig| trap(sig) { server.stop } }
end
